package net.mortaxx.software.FTLEdit;

/*
Copyright (c) 2009-2019, Christian Hecht. 
All rights reserved.

This software is published under the "Simplified BSD License" (2-clause license)

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FTLEdit project.

These class is part of program FTLEdit.

FTLEdit includes and uses libraries and source code from some other contributors:

--> FileTree.java - Extension of JTree class to show a file system explorer - Copyright 2005 by Janni Kovacs
- Copied from the tutorial at java-forum.org
- For further information, see <http://www.java-forum.org/java-faq-beitraege/23430-jtree-anwendung-1-directorychooser.html>

--> Parts of GUI code generated by GuiGenie - Copyright (c) 2004 Mario Awad.
- Home Page http://guigenie.cjb.net - Check often for new versions!

--> Rsyntaxtextarea/RSTALanguageSupport/AutoComplete
Copyright (c) 2012, Robert Futrell - https://github.com/bobbylight

--> Rhino
Copyright (c) 2012, Mozilla Corporation - https://github.com/mozilla/rhino

--> Chromium Embedded Framwork (cef)/Java Chromium Embeddes Framework (jcef)
Copyright (c) 2008-2013, Marshall A. Greenblatt. 
Portions Copyright (c) 2006-2009 Google Inc.
https://bitbucket.org/chromiumembedded/java-cef/src/master/
https://bitbucket.org/chromiumembedded/cef/src/master/

--> Gluegen/Jogl
Copyright (c) 2010 JogAmp Community - http://jogamp.org/

*/

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.swing.JTree;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeWillExpandListener;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import net.mortaxx.software.osdfsutils.SpecialDataTypes;

@SuppressWarnings("serial")
public class FileTree extends JTree implements TreeWillExpandListener {

	private static interface MXFileFilter extends FileFilter {
		
		public File getResolvedFile();
		
		public File acceptSpecialFiles(File f); 
	}
	
	private static class FileComparator implements Comparator<File> {

		public int compare(File f1, File f2) {
			if(f1.isDirectory() ^ f2.isDirectory()) {
				return (f1.isDirectory() ? -1 : 1);
			}

			return f1.getName().compareToIgnoreCase(f2.getName());

		}
	}

	private static class DirectoryFilter implements MXFileFilter {

		public boolean accept(File f) {
			return f.isDirectory();
		}

		public File getResolvedFile() {
			// TODO Auto-generated method stub
			return null;
		}

		public File acceptSpecialFiles(File f) {
			// TODO Auto-generated method stub
			return null;
		}
	}

	private static class AcceptAllFilter implements MXFileFilter {

		public boolean accept(File f) {
			return true;
		}

		public File getResolvedFile() {
			// TODO Auto-generated method stub
			return null;
		}

		public File acceptSpecialFiles(File f) {
			// TODO Auto-generated method stub
			return null;
		}
	}

	private static class SpecialFilesFilter implements MXFileFilter {

		static File resolvedFile = null;
		
		public boolean accept(File f) {
			resolvedFile = null;
			resolvedFile = SpecialDataTypes.handleSpecialData(f);
			if (resolvedFile != null) {
				if (System.getProperty("os.name").startsWith("Mac OS")) {
					return true;
				}
				else {	
					
					return false; 
				
				}
			}
			else {
				return true;
			}
		}
		public File getResolvedFile() {
			return resolvedFile;
		}
		public File acceptSpecialFiles(File f) {
					
			File result = null;
// Je nach Betriebssystem spezifische Methoden f�r spezielle Dateien/Links aufrufen
			
			if (SpecialDataTypes.isMac() == true) {
/*
 * ---------> Mac
 */
				
				if (f.isFile() == true) {
					
// Ein Alias erscheint f�r Java immer als Datei, daher muss die Pr�fung nur f�r Dateien stattfinden
					
					result = SpecialDataTypes.resolveAlias(f);

// Wenn es ein Alias ist, hat die Methode das Alias-Ziel zur�ckgeliefert, ansonsten wird das Original zur�ckgegeben
					if (result != null) {
						return result;
					} else {
										
						return f;
					}
									
				}
				else {
// Keine Datei - Originaldateireferenz zur�ckliefern										
					return f;
				}
				
			} else if (SpecialDataTypes.isWindows() == true) {
/*
 * ---------> Windows
 */										
				try {
					
// Zuerst pr�fen, ob es eine Junction oder ein symbolischer Link ist
					
					if (SpecialDataTypes.isJunctionOrSymlink(f) == true) {
						
// Wenn diese Verkn�pfung versteckt ist, dann soll sie auch nicht angezeigt werden, da es sich dann meist
// um spezielle Junctions von Windows handelt, die sowieso nicht ge�ffnet werden k�nnen
						
						if (f.isHidden() == true) {
							return null;
						} else {
							System.out.println(f.getAbsolutePath() + "--> WIN -> is not hidden Junction or Symlink");
							return f;
						}
					} else {

// Pr�fen ob es ein lnk-File - also die "normale" Windows-Verkn�pfung ist, wenn ja, diese zur�ckgeben, ansonsten das Original
						
						result = SpecialDataTypes.isWindowsLinkFile(f);
						if (result != null) {
							return result;
						} else {
							return f;
						}
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} else if (SpecialDataTypes.isUnixLinux() == true) {
				return f;
			}				
		
			return f;
		}
	}
	
	private static final Comparator<File> FILE_COMPARATOR = new FileComparator();

	/** Ein FileFilter, der nur Verzeichnisse akzeptiert */
	public static final MXFileFilter DIRECTORY_FILTER = new DirectoryFilter();

	/** Ein FileFilter der alle Typen von Dateien und Verzeichnisse akzeptiert */
	public static final MXFileFilter ACCEPT_ALL_FILTER = new AcceptAllFilter();

	/** Ein FileFilter der alle Dateien akzeptiert, mit Ausnahme besonderer 
	 *  betriebssystemspezifischer Dateitypen wie
	 *  - Alias unter MacOS X
	 *  - Verkn�pfungen unter Windows */
	public static final MXFileFilter SPECIAL_FILES_FILTER = new SpecialFilesFilter();
	
	/** Der aktuelle FileFilter */
	protected MXFileFilter filter = null;

	public FileTree(String projectDir) {
		
		super((DefaultTreeModel)null);// Create the JTree itself
		// �bergebenes Verzeichnis als Wurzelverzeichnis setzen
		File homeDir = new File(projectDir); //FileSystemView.getFileSystemView().getHomeDirectory();
		// Wurzelelement erstellen
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(homeDir);
		// Model erstellen mit root als Wurzelelement
		DefaultTreeModel model = new DefaultTreeModel(root);
		setModel(model);
		setShowsRootHandles(true);
		// TreeCellRenderer setzen.
		setCellRenderer(new FileTreeRenderer());
		// Wurzel aufklappen
		expandPath(root);
		// Listener hinzuf�gen
		addTreeWillExpandListener(this);
		// und so ...
		getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		
	}

	/**
	 * Erweitert einen Pfad im Tree.
	 * 
	 * @param d Den Parent Knoten
	 */
	public void expandPath(final DefaultMutableTreeNode d) {
		d.removeAllChildren();
		File[] tempf = ((File) d.getUserObject()).listFiles();
		File proofedfile = null;

		List<File> files = Arrays.asList(tempf);
		Collections.sort(files, FILE_COMPARATOR);

		DefaultMutableTreeNode temp = null;
		for(File file: files) {
			if(filter != null) {

				proofedfile = filter.acceptSpecialFiles(file);
				if (proofedfile == null) {
					continue;
				} 
			} else {
				continue;
			}

			temp = new DefaultMutableTreeNode(proofedfile); 
			
			if(proofedfile.isDirectory())
				temp.add(new DefaultMutableTreeNode(null));
			d.add(temp);
		}
		((DefaultTreeModel) getModel()).reload(d);
	}

	/**
	 * Setzt den FileFilter und setzt den Tree zur�ck.
	 * 
	 * @param f Der neue FileFilter
	 */
	public void setFileFilter(MXFileFilter f) {
		filter = f;
		expandPath((DefaultMutableTreeNode) getModel().getRoot());
	}

	/**
	 * Liefert den aktuell gesetzten FileFilter zur�ck
	 * @return Den FileFilter
	 */
	public MXFileFilter getFileFilter() {
		return filter;
	}

	public File getSelectedFile() {
		TreePath selectionPath = getSelectionPath();
		if(selectionPath == null)
			return null;
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectionPath.getLastPathComponent();
		return (File) node.getUserObject();
	}

	public void treeWillCollapse(TreeExpansionEvent e) {
		((DefaultMutableTreeNode) (e.getPath().getLastPathComponent())).removeAllChildren();
		((DefaultMutableTreeNode) (e.getPath().getLastPathComponent())).add(new DefaultMutableTreeNode(null));
	}

	public void treeWillExpand(TreeExpansionEvent e) {
		expandPath((DefaultMutableTreeNode) (e.getPath().getLastPathComponent()));
	}
	
	public void changeRoot(String newRoot) {

		File homeDir = new File(newRoot); //FileSystemView.getFileSystemView().getHomeDirectory();
		// Wurzelelement erstellen
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(homeDir);
		// Model erstellen mit root als Wurzelelement
		DefaultTreeModel model = new DefaultTreeModel(root);
		setModel(model);
		setShowsRootHandles(true);
		// TreeCellRenderer setzen.
		setCellRenderer(new FileTreeRenderer());
		// Wurzel aufklappen
		expandPath(root);
		// Listener hinzuf�gen
		addTreeWillExpandListener(this);
		// und so ...
		getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
	}
	

}