package net.mortaxx.software.FTLEdit;

/*
Copyright (c) 2009-2019, Christian Hecht. 
All rights reserved.

This software is published under the "Simplified BSD License" (2-clause license)

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FTLEdit project.

These class is part of program FTLEdit.

FTLEdit includes and uses libraries and source code from some other contributors:

--> FileTree.java - Extension of JTree class to show a file system explorer - Copyright 2005 by Janni Kovacs
- Copied from the tutorial at java-forum.org
- For further information, see <http://www.java-forum.org/java-faq-beitraege/23430-jtree-anwendung-1-directorychooser.html>

--> Parts of GUI code generated by GuiGenie - Copyright (c) 2004 Mario Awad.
- Home Page http://guigenie.cjb.net - Check often for new versions!

--> Rsyntaxtextarea/RSTALanguageSupport/AutoComplete
Copyright (c) 2012, Robert Futrell - https://github.com/bobbylight

--> Rhino
Copyright (c) 2012, Mozilla Corporation - https://github.com/mozilla/rhino

--> Chromium Embedded Framwork (cef)/Java Chromium Embeddes Framework (jcef)
Copyright (c) 2008-2013, Marshall A. Greenblatt. 
Portions Copyright (c) 2006-2009 Google Inc.
https://bitbucket.org/chromiumembedded/java-cef/src/master/
https://bitbucket.org/chromiumembedded/cef/src/master/

--> Gluegen/Jogl
Copyright (c) 2010 JogAmp Community - http://jogamp.org/

*/
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;

// import chrriis.dj.nativeswing.swtimpl.components.JWebBrowser;

public class FTLEditBrowserViewMac extends FTLEditBrowserView{

	URL thePreviewURL;
	String pv;
	boolean firstcall = true;
//	JWebBrowser webBrowser;
	
	public FTLEditBrowserViewMac(JFrame owner, String title, boolean modal) {
		
		super(owner, title, modal);
//		initBrowser();
	}
	
	void initBrowser() {
		
// Dummy - wird hier nicht ben�tigt
		
	}
	
	
	void closePreview() {
		
//		webBrowser.disposeNativePeer(false);
		
/*		Display.getDefault().syncExec(new Runnable() {
			   public void run() {

				   previewBrowser.dispose();
				   previewShell.dispose();
				   
			   }
			  });

		this.dispose();*/
	}

	public void setPreviewURL(File filetourl) {

		String cmdline;
		
// URL zum Tempfile in Safari via Applescript �ffnen und/oder Anzeige refreshen

				
				InputStream stdout = null;
				BufferedReader brstdout = null;
				
		/* Runtime environment for system calls */
				
			    Runtime runtime = Runtime.getRuntime();

		if (filetourl != null) {
		
// URL zur anzuzeigenden Datei setzen, wenn es sich um eine Datei handelt
			
				if (filetourl.isFile()) {
					try {
						pv = filetourl.toURI().toURL().toString();
					} catch (MalformedURLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
							   
				}

				cmdline = "make new document with properties {URL:\"" + pv + "\"}";
				
				if (firstcall == true && filetourl.isFile()) {
					
// Schritt 1 - Neues Browserfenster mit der tempor�ren Datei als URL �ffnen


				    String[] args = { "osascript",
	    					"-e", 
	    					"tell application \"Safari\"",
	    						"-e",
	    						cmdline,
	    						"-e",
	    					"end tell",
	    					"-e",
// Damit das Setzen der Fenstergr��e funktioniert, mu� UI-Scripting in den Systemeinstellungen an sein
	    					
	    					"tell application \"System Events\"",
	    						"-e",
	    						"tell process \"Safari\"",
	    							"-e",
	    							"try",
	    							"-e",
	    								"set window1 to (get first window whose visible is true)",
	    								"-e",
	    							"on error",
	    								"-e",
	    								"set window1 to front window",
	    							"-e",
	    							"end try",
	    							"-e",
	    							"tell window1",
	    								"-e",
	    								"set position to {50, 100}",
	    								"-e",
	    								"set size to {800, 600}",
	    							"-e",
	    							"end tell",
	    							"-e",
	    						"end tell",
	    					"-e",
	    					"end tell"
					};
				    
				    try {
				    	
/* Script mit dem osascript Tool ausf�hren*/
							    	
				    	Process firstproc = runtime.exec(args);
							      
						/* If the applescript has determined a valid alias then the target of the alias is written to stdout.
						 * So now we read the input stream from the process - if there is any content, an alias was detected
						 * and the method returns true */
							      
/*							      stdout = firstproc.getInputStream();
							      brstdout = new BufferedReader(new InputStreamReader(stdout));
							      
							      if ((brstdout.readLine()) != null) {
							    	  System.out.println(brstdout.readLine());
							      }
							      else {
							    	  
							      }*/

					}
					catch (IOException e)
						{
							e.printStackTrace();
							   
					};
					
				}
			    
				if (firstcall == false) {
			    String[] args = { "osascript",
			    					"-e", 
			    					"property windowcounter : \"\"",
			    					"-e",
			    					"tell application \"Safari\"",
		    							"-e",
		    							"set windowList to every window",
		    							"-e",
		    							"repeat with aWindow in windowList",
		    								"-e",
		    								"set tabList to every tab of aWindow",
		    								"-e",
		    								"repeat with atab in tabList", 
		    									"-e",
		    									"try",
		    									"-e",
		    										"if (URL of atab contains \"flatfusionedittmp\" ) then",
		    											"-e",
		    											"set windowcounter to windowcounter + 1",
		    										"-e",
		    										"end if",
		    									"-e",
	    										"on error",
	    										"-e",
	    										"end try",
		    								"-e",
		    								"end repeat",
		    							"-e",
		    							"end repeat",
		    						"-e",
		    						"end tell",
		    						"-e",
		    						"if windowcounter is equal to \"\" then",
		    							"-e",
		    	    					"tell application \"Safari\"",
			    							"-e",
			    							cmdline,
			    						"-e",
			    						"end tell",	    							
		    						"-e",
		    						"end if",
		    						"-e",
			    					"tell application \"Safari\"",
			    						"-e",
			    						"set windowList to every window",
			    						"-e",
			    						"repeat with aWindow in windowList",
			    							"-e",
			    							"set tabList to every tab of aWindow",
			    							"-e",
			    							"repeat with atab in tabList", 
			    								"-e",
		    									"try",
		    									"-e",
			    									"if (URL of atab contains \"flatfusionedittmp\" ) then",
			    										"-e",
			    										"tell atab to do JavaScript \"window.location.reload()\"",
			    										"-e",
			    									"end if",
			    								"-e",
		    									"on error",
		    									"-e",
		    									"end try",
			    							"-e",
			    							"end repeat",
			    						"-e",
			    						"end repeat",
			    					"-e",
			    					"end tell"};

			    try {
			    	
/* Refresh Script mit dem osascript tool ausf�hren*/
			    	
			      Process proc = runtime.exec(args);
			      
		/* If the applescript has determined a valid alias then the target of the alias is written to stdout.
		 * So now we read the input stream from the process - if there is any content, an alias was detected
		 * and the method returns true */
			      
/*			      stdout = proc.getInputStream();
			      brstdout = new BufferedReader(new InputStreamReader(stdout));
			      
			      if ((brstdout.readLine()) != null) {
			    	  
			      }
			      else {
			    	  
			      } */

			    }
			    catch (IOException e)
			    {
			      e.printStackTrace();
			   
			    }
			    
				} else {
					firstcall = false;
				}

		}
	}
}
